<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.pandawork.net/web/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd
                        http://www.springframework.org/schema/tx
                        http://www.springframework.org/schema/tx/spring-tx.xsd http://www.pandawork.net/web/schema/mvc http://www.pandawork.net/web/schema/mvc/spring-mvc.xsd">

    <!--&lt;!&ndash; 隐式地向 Spring 容器注册AutowiredAnnotationBeanPostProcessor,CommonAnnotationBeanPostProcessor,PersistenceAnnotationBeanPostProcessor,RequiredAnnotationBeanPostProcessor &ndash;&gt;
    <context:annotation-config />
    &lt;!&ndash; enable transaction demarcation with annotations 开启事务 &ndash;&gt;
    <tx:annotation-driven />
    &lt;!&ndash;启用注解&ndash;&gt;
    <mvc:annotation-driven />
    &lt;!&ndash; 自动扫描  @Controller&ndash;&gt;
    &lt;!&ndash;<context:component-scan base-package="com.cms.web.controller"/>&ndash;&gt;
    <bean class="com.pandawork.core.framework.bean.StaticAutoWireBeanPostProcessor" />

    <- 自动扫描 -->
    <!--<context:component-scan base-package="com.pandawork.core.common.log" />-->
    <!--<context:component-scan base-package="com.cms.common"/>-->
    <!--<context:component-scan base-package="com.cms.mapper"/>-->
    <!--<context:component-scan base-package="com.cms.service"/>-->
    <!--<context:component-scan base-package="com.cms.web.controller"/>-->
    <bean class="com.pandawork.core.framework.bean.StaticAutoWireBeanPostProcessor" />
    <!-- 第一种方式：加载一个properties文件 -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:jdbc.properties"/>
    </bean>


    <!-- 第二种方式：加载多个properties文件
    <bean id="configProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="locations">
            <list>
                <value>classpath:jdbc.properties</value>
                <value>classpath:common.properties</value>
            </list>
        </property>
        <property name="fileEncoding" value="UTF-8"/>
    </bean>
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
        <property name="properties" ref="configProperties"/>
    </bean>
    -->

    <!-- 配置数据源 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="${driverClasss}"/>
        <property name="url" value="${jdbcUrl}"/>
        <property name="username" value="${username}"/>
        <property name="password" value="${password}"/>
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="${initialSize}"></property>
        <!-- 连接池最大数量 -->
        <property name="maxActive" value="${maxActive}"></property>
        <!-- 连接池最大空闲 -->
        <property name="maxIdle" value="${maxIdle}"></property>
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="${minIdle}"></property>
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="${maxWait}"></property>
    </bean>


    <!-- mybatis和spring完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!--实体目录-->
        <property name="typeAliasesPackage" value="com.cms.common.entity;com.cms.common.dto" />
        <!-- 自动扫描mapping.xml文件 -->
        <property name="mapperLocations">
            <list>
                <value>classpath:com/cms/mapper/**/*mapper.xml</value>
            </list>
        </property>
    </bean>
    <bean id="sqlSessionTemplate"
          class="com.pandawork.core.framework.dao.mybatis.dataBaseSharing.template.RWSqlSessionTemplate">
        <constructor-arg ref="sqlSessionFactory" />
    </bean>
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.cms.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>

    <bean id="mapper" class="com.pandawork.core.framework.dao.mybatis.dataBaseSharing.template.RWMapperScannerConfigurer">
        <property name="basePackage" value="com.cms.mapper"></property>
        <property name="sqlSessionTemplate" ref="sqlSessionTemplate"></property>
    </bean>


    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!--<import resource="spring-mvc.xml"/>-->
    <!--<import resource="web-config.xml"/>-->
</beans>